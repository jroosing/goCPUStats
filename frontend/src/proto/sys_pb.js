// source: sys.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
/* eslint-disable */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.cpustats.sys.Cpu', null, global);
goog.exportSymbol('proto.cpustats.sys.CpuLoad', null, global);
goog.exportSymbol('proto.cpustats.sys.HardwareInfo', null, global);
goog.exportSymbol('proto.cpustats.sys.HardwareLoad', null, global);
goog.exportSymbol('proto.cpustats.sys.HardwareTemperatures', null, global);
goog.exportSymbol('proto.cpustats.sys.Host', null, global);
goog.exportSymbol('proto.cpustats.sys.MemoryLoad', null, global);
goog.exportSymbol('proto.cpustats.sys.TempStats', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpustats.sys.HardwareInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cpustats.sys.HardwareInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpustats.sys.HardwareInfo.displayName = 'proto.cpustats.sys.HardwareInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpustats.sys.Host = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cpustats.sys.Host, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpustats.sys.Host.displayName = 'proto.cpustats.sys.Host';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpustats.sys.Cpu = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cpustats.sys.Cpu, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpustats.sys.Cpu.displayName = 'proto.cpustats.sys.Cpu';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpustats.sys.HardwareLoad = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cpustats.sys.HardwareLoad, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpustats.sys.HardwareLoad.displayName = 'proto.cpustats.sys.HardwareLoad';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpustats.sys.CpuLoad = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cpustats.sys.CpuLoad.repeatedFields_, null);
};
goog.inherits(proto.cpustats.sys.CpuLoad, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpustats.sys.CpuLoad.displayName = 'proto.cpustats.sys.CpuLoad';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpustats.sys.MemoryLoad = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cpustats.sys.MemoryLoad, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpustats.sys.MemoryLoad.displayName = 'proto.cpustats.sys.MemoryLoad';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpustats.sys.TempStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cpustats.sys.TempStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpustats.sys.TempStats.displayName = 'proto.cpustats.sys.TempStats';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cpustats.sys.HardwareTemperatures = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cpustats.sys.HardwareTemperatures, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cpustats.sys.HardwareTemperatures.displayName = 'proto.cpustats.sys.HardwareTemperatures';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpustats.sys.HardwareInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.cpustats.sys.HardwareInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpustats.sys.HardwareInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpustats.sys.HardwareInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    host: (f = msg.getHost()) && proto.cpustats.sys.Host.toObject(includeInstance, f),
    cpu: (f = msg.getCpu()) && proto.cpustats.sys.Cpu.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpustats.sys.HardwareInfo}
 */
proto.cpustats.sys.HardwareInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpustats.sys.HardwareInfo;
  return proto.cpustats.sys.HardwareInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpustats.sys.HardwareInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpustats.sys.HardwareInfo}
 */
proto.cpustats.sys.HardwareInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cpustats.sys.Host;
      reader.readMessage(value,proto.cpustats.sys.Host.deserializeBinaryFromReader);
      msg.setHost(value);
      break;
    case 2:
      var value = new proto.cpustats.sys.Cpu;
      reader.readMessage(value,proto.cpustats.sys.Cpu.deserializeBinaryFromReader);
      msg.setCpu(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpustats.sys.HardwareInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpustats.sys.HardwareInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpustats.sys.HardwareInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpustats.sys.HardwareInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHost();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cpustats.sys.Host.serializeBinaryToWriter
    );
  }
  f = message.getCpu();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cpustats.sys.Cpu.serializeBinaryToWriter
    );
  }
};


/**
 * optional Host host = 1;
 * @return {?proto.cpustats.sys.Host}
 */
proto.cpustats.sys.HardwareInfo.prototype.getHost = function() {
  return /** @type{?proto.cpustats.sys.Host} */ (
    jspb.Message.getWrapperField(this, proto.cpustats.sys.Host, 1));
};


/**
 * @param {?proto.cpustats.sys.Host|undefined} value
 * @return {!proto.cpustats.sys.HardwareInfo} returns this
*/
proto.cpustats.sys.HardwareInfo.prototype.setHost = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cpustats.sys.HardwareInfo} returns this
 */
proto.cpustats.sys.HardwareInfo.prototype.clearHost = function() {
  return this.setHost(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpustats.sys.HardwareInfo.prototype.hasHost = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Cpu cpu = 2;
 * @return {?proto.cpustats.sys.Cpu}
 */
proto.cpustats.sys.HardwareInfo.prototype.getCpu = function() {
  return /** @type{?proto.cpustats.sys.Cpu} */ (
    jspb.Message.getWrapperField(this, proto.cpustats.sys.Cpu, 2));
};


/**
 * @param {?proto.cpustats.sys.Cpu|undefined} value
 * @return {!proto.cpustats.sys.HardwareInfo} returns this
*/
proto.cpustats.sys.HardwareInfo.prototype.setCpu = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cpustats.sys.HardwareInfo} returns this
 */
proto.cpustats.sys.HardwareInfo.prototype.clearCpu = function() {
  return this.setCpu(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpustats.sys.HardwareInfo.prototype.hasCpu = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpustats.sys.Host.prototype.toObject = function(opt_includeInstance) {
  return proto.cpustats.sys.Host.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpustats.sys.Host} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpustats.sys.Host.toObject = function(includeInstance, msg) {
  var f, obj = {
    hostName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    platform: jspb.Message.getFieldWithDefault(msg, 2, ""),
    platformFamily: jspb.Message.getFieldWithDefault(msg, 3, ""),
    platformVersion: jspb.Message.getFieldWithDefault(msg, 4, ""),
    kernelVersion: jspb.Message.getFieldWithDefault(msg, 5, ""),
    kernelArchitecture: jspb.Message.getFieldWithDefault(msg, 6, ""),
    operatingSystem: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpustats.sys.Host}
 */
proto.cpustats.sys.Host.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpustats.sys.Host;
  return proto.cpustats.sys.Host.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpustats.sys.Host} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpustats.sys.Host}
 */
proto.cpustats.sys.Host.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlatform(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlatformFamily(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlatformVersion(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setKernelVersion(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setKernelArchitecture(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperatingSystem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpustats.sys.Host.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpustats.sys.Host.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpustats.sys.Host} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpustats.sys.Host.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHostName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlatform();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPlatformFamily();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPlatformVersion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getKernelVersion();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getKernelArchitecture();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getOperatingSystem();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string host_name = 1;
 * @return {string}
 */
proto.cpustats.sys.Host.prototype.getHostName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cpustats.sys.Host} returns this
 */
proto.cpustats.sys.Host.prototype.setHostName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string platform = 2;
 * @return {string}
 */
proto.cpustats.sys.Host.prototype.getPlatform = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cpustats.sys.Host} returns this
 */
proto.cpustats.sys.Host.prototype.setPlatform = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string platform_family = 3;
 * @return {string}
 */
proto.cpustats.sys.Host.prototype.getPlatformFamily = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.cpustats.sys.Host} returns this
 */
proto.cpustats.sys.Host.prototype.setPlatformFamily = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string platform_version = 4;
 * @return {string}
 */
proto.cpustats.sys.Host.prototype.getPlatformVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.cpustats.sys.Host} returns this
 */
proto.cpustats.sys.Host.prototype.setPlatformVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string kernel_version = 5;
 * @return {string}
 */
proto.cpustats.sys.Host.prototype.getKernelVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.cpustats.sys.Host} returns this
 */
proto.cpustats.sys.Host.prototype.setKernelVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string kernel_architecture = 6;
 * @return {string}
 */
proto.cpustats.sys.Host.prototype.getKernelArchitecture = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.cpustats.sys.Host} returns this
 */
proto.cpustats.sys.Host.prototype.setKernelArchitecture = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string operating_system = 7;
 * @return {string}
 */
proto.cpustats.sys.Host.prototype.getOperatingSystem = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.cpustats.sys.Host} returns this
 */
proto.cpustats.sys.Host.prototype.setOperatingSystem = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpustats.sys.Cpu.prototype.toObject = function(opt_includeInstance) {
  return proto.cpustats.sys.Cpu.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpustats.sys.Cpu} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpustats.sys.Cpu.toObject = function(includeInstance, msg) {
  var f, obj = {
    modelName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    physicalCores: jspb.Message.getFieldWithDefault(msg, 2, 0),
    logicalCores: jspb.Message.getFieldWithDefault(msg, 3, 0),
    cacheSize: jspb.Message.getFieldWithDefault(msg, 4, 0),
    architecture: jspb.Message.getFieldWithDefault(msg, 5, ""),
    mhz: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpustats.sys.Cpu}
 */
proto.cpustats.sys.Cpu.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpustats.sys.Cpu;
  return proto.cpustats.sys.Cpu.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpustats.sys.Cpu} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpustats.sys.Cpu}
 */
proto.cpustats.sys.Cpu.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setModelName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPhysicalCores(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLogicalCores(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCacheSize(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setArchitecture(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMhz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpustats.sys.Cpu.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpustats.sys.Cpu.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpustats.sys.Cpu} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpustats.sys.Cpu.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModelName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPhysicalCores();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getLogicalCores();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getCacheSize();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getArchitecture();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMhz();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
};


/**
 * optional string model_name = 1;
 * @return {string}
 */
proto.cpustats.sys.Cpu.prototype.getModelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cpustats.sys.Cpu} returns this
 */
proto.cpustats.sys.Cpu.prototype.setModelName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 physical_cores = 2;
 * @return {number}
 */
proto.cpustats.sys.Cpu.prototype.getPhysicalCores = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cpustats.sys.Cpu} returns this
 */
proto.cpustats.sys.Cpu.prototype.setPhysicalCores = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 logical_cores = 3;
 * @return {number}
 */
proto.cpustats.sys.Cpu.prototype.getLogicalCores = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.cpustats.sys.Cpu} returns this
 */
proto.cpustats.sys.Cpu.prototype.setLogicalCores = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 cache_size = 4;
 * @return {number}
 */
proto.cpustats.sys.Cpu.prototype.getCacheSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.cpustats.sys.Cpu} returns this
 */
proto.cpustats.sys.Cpu.prototype.setCacheSize = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string architecture = 5;
 * @return {string}
 */
proto.cpustats.sys.Cpu.prototype.getArchitecture = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.cpustats.sys.Cpu} returns this
 */
proto.cpustats.sys.Cpu.prototype.setArchitecture = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional double mhz = 6;
 * @return {number}
 */
proto.cpustats.sys.Cpu.prototype.getMhz = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.cpustats.sys.Cpu} returns this
 */
proto.cpustats.sys.Cpu.prototype.setMhz = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpustats.sys.HardwareLoad.prototype.toObject = function(opt_includeInstance) {
  return proto.cpustats.sys.HardwareLoad.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpustats.sys.HardwareLoad} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpustats.sys.HardwareLoad.toObject = function(includeInstance, msg) {
  var f, obj = {
    cpu: (f = msg.getCpu()) && proto.cpustats.sys.CpuLoad.toObject(includeInstance, f),
    mem: (f = msg.getMem()) && proto.cpustats.sys.MemoryLoad.toObject(includeInstance, f),
    swapMem: (f = msg.getSwapMem()) && proto.cpustats.sys.MemoryLoad.toObject(includeInstance, f),
    temps: (f = msg.getTemps()) && proto.cpustats.sys.HardwareTemperatures.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpustats.sys.HardwareLoad}
 */
proto.cpustats.sys.HardwareLoad.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpustats.sys.HardwareLoad;
  return proto.cpustats.sys.HardwareLoad.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpustats.sys.HardwareLoad} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpustats.sys.HardwareLoad}
 */
proto.cpustats.sys.HardwareLoad.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cpustats.sys.CpuLoad;
      reader.readMessage(value,proto.cpustats.sys.CpuLoad.deserializeBinaryFromReader);
      msg.setCpu(value);
      break;
    case 2:
      var value = new proto.cpustats.sys.MemoryLoad;
      reader.readMessage(value,proto.cpustats.sys.MemoryLoad.deserializeBinaryFromReader);
      msg.setMem(value);
      break;
    case 3:
      var value = new proto.cpustats.sys.MemoryLoad;
      reader.readMessage(value,proto.cpustats.sys.MemoryLoad.deserializeBinaryFromReader);
      msg.setSwapMem(value);
      break;
    case 4:
      var value = new proto.cpustats.sys.HardwareTemperatures;
      reader.readMessage(value,proto.cpustats.sys.HardwareTemperatures.deserializeBinaryFromReader);
      msg.setTemps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpustats.sys.HardwareLoad.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpustats.sys.HardwareLoad.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpustats.sys.HardwareLoad} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpustats.sys.HardwareLoad.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCpu();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cpustats.sys.CpuLoad.serializeBinaryToWriter
    );
  }
  f = message.getMem();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cpustats.sys.MemoryLoad.serializeBinaryToWriter
    );
  }
  f = message.getSwapMem();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.cpustats.sys.MemoryLoad.serializeBinaryToWriter
    );
  }
  f = message.getTemps();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.cpustats.sys.HardwareTemperatures.serializeBinaryToWriter
    );
  }
};


/**
 * optional CpuLoad cpu = 1;
 * @return {?proto.cpustats.sys.CpuLoad}
 */
proto.cpustats.sys.HardwareLoad.prototype.getCpu = function() {
  return /** @type{?proto.cpustats.sys.CpuLoad} */ (
    jspb.Message.getWrapperField(this, proto.cpustats.sys.CpuLoad, 1));
};


/**
 * @param {?proto.cpustats.sys.CpuLoad|undefined} value
 * @return {!proto.cpustats.sys.HardwareLoad} returns this
*/
proto.cpustats.sys.HardwareLoad.prototype.setCpu = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cpustats.sys.HardwareLoad} returns this
 */
proto.cpustats.sys.HardwareLoad.prototype.clearCpu = function() {
  return this.setCpu(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpustats.sys.HardwareLoad.prototype.hasCpu = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MemoryLoad mem = 2;
 * @return {?proto.cpustats.sys.MemoryLoad}
 */
proto.cpustats.sys.HardwareLoad.prototype.getMem = function() {
  return /** @type{?proto.cpustats.sys.MemoryLoad} */ (
    jspb.Message.getWrapperField(this, proto.cpustats.sys.MemoryLoad, 2));
};


/**
 * @param {?proto.cpustats.sys.MemoryLoad|undefined} value
 * @return {!proto.cpustats.sys.HardwareLoad} returns this
*/
proto.cpustats.sys.HardwareLoad.prototype.setMem = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cpustats.sys.HardwareLoad} returns this
 */
proto.cpustats.sys.HardwareLoad.prototype.clearMem = function() {
  return this.setMem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpustats.sys.HardwareLoad.prototype.hasMem = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional MemoryLoad swap_mem = 3;
 * @return {?proto.cpustats.sys.MemoryLoad}
 */
proto.cpustats.sys.HardwareLoad.prototype.getSwapMem = function() {
  return /** @type{?proto.cpustats.sys.MemoryLoad} */ (
    jspb.Message.getWrapperField(this, proto.cpustats.sys.MemoryLoad, 3));
};


/**
 * @param {?proto.cpustats.sys.MemoryLoad|undefined} value
 * @return {!proto.cpustats.sys.HardwareLoad} returns this
*/
proto.cpustats.sys.HardwareLoad.prototype.setSwapMem = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cpustats.sys.HardwareLoad} returns this
 */
proto.cpustats.sys.HardwareLoad.prototype.clearSwapMem = function() {
  return this.setSwapMem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpustats.sys.HardwareLoad.prototype.hasSwapMem = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional HardwareTemperatures temps = 4;
 * @return {?proto.cpustats.sys.HardwareTemperatures}
 */
proto.cpustats.sys.HardwareLoad.prototype.getTemps = function() {
  return /** @type{?proto.cpustats.sys.HardwareTemperatures} */ (
    jspb.Message.getWrapperField(this, proto.cpustats.sys.HardwareTemperatures, 4));
};


/**
 * @param {?proto.cpustats.sys.HardwareTemperatures|undefined} value
 * @return {!proto.cpustats.sys.HardwareLoad} returns this
*/
proto.cpustats.sys.HardwareLoad.prototype.setTemps = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cpustats.sys.HardwareLoad} returns this
 */
proto.cpustats.sys.HardwareLoad.prototype.clearTemps = function() {
  return this.setTemps(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpustats.sys.HardwareLoad.prototype.hasTemps = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cpustats.sys.CpuLoad.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpustats.sys.CpuLoad.prototype.toObject = function(opt_includeInstance) {
  return proto.cpustats.sys.CpuLoad.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpustats.sys.CpuLoad} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpustats.sys.CpuLoad.toObject = function(includeInstance, msg) {
  var f, obj = {
    usedPercent: jspb.Message.getFieldWithDefault(msg, 1, 0),
    usedPerLogicalCorePercentList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpustats.sys.CpuLoad}
 */
proto.cpustats.sys.CpuLoad.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpustats.sys.CpuLoad;
  return proto.cpustats.sys.CpuLoad.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpustats.sys.CpuLoad} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpustats.sys.CpuLoad}
 */
proto.cpustats.sys.CpuLoad.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUsedPercent(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setUsedPerLogicalCorePercentList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpustats.sys.CpuLoad.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpustats.sys.CpuLoad.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpustats.sys.CpuLoad} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpustats.sys.CpuLoad.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsedPercent();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getUsedPerLogicalCorePercentList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 used_percent = 1;
 * @return {number}
 */
proto.cpustats.sys.CpuLoad.prototype.getUsedPercent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cpustats.sys.CpuLoad} returns this
 */
proto.cpustats.sys.CpuLoad.prototype.setUsedPercent = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated int32 used_per_logical_core_percent = 2;
 * @return {!Array<number>}
 */
proto.cpustats.sys.CpuLoad.prototype.getUsedPerLogicalCorePercentList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.cpustats.sys.CpuLoad} returns this
 */
proto.cpustats.sys.CpuLoad.prototype.setUsedPerLogicalCorePercentList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.cpustats.sys.CpuLoad} returns this
 */
proto.cpustats.sys.CpuLoad.prototype.addUsedPerLogicalCorePercent = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cpustats.sys.CpuLoad} returns this
 */
proto.cpustats.sys.CpuLoad.prototype.clearUsedPerLogicalCorePercentList = function() {
  return this.setUsedPerLogicalCorePercentList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpustats.sys.MemoryLoad.prototype.toObject = function(opt_includeInstance) {
  return proto.cpustats.sys.MemoryLoad.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpustats.sys.MemoryLoad} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpustats.sys.MemoryLoad.toObject = function(includeInstance, msg) {
  var f, obj = {
    total: jspb.Message.getFieldWithDefault(msg, 1, 0),
    used: jspb.Message.getFieldWithDefault(msg, 2, 0),
    usedPercent: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpustats.sys.MemoryLoad}
 */
proto.cpustats.sys.MemoryLoad.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpustats.sys.MemoryLoad;
  return proto.cpustats.sys.MemoryLoad.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpustats.sys.MemoryLoad} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpustats.sys.MemoryLoad}
 */
proto.cpustats.sys.MemoryLoad.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotal(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUsed(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUsedPercent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpustats.sys.MemoryLoad.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpustats.sys.MemoryLoad.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpustats.sys.MemoryLoad} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpustats.sys.MemoryLoad.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotal();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getUsed();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getUsedPercent();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional uint64 total = 1;
 * @return {number}
 */
proto.cpustats.sys.MemoryLoad.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cpustats.sys.MemoryLoad} returns this
 */
proto.cpustats.sys.MemoryLoad.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 used = 2;
 * @return {number}
 */
proto.cpustats.sys.MemoryLoad.prototype.getUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cpustats.sys.MemoryLoad} returns this
 */
proto.cpustats.sys.MemoryLoad.prototype.setUsed = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 used_percent = 3;
 * @return {number}
 */
proto.cpustats.sys.MemoryLoad.prototype.getUsedPercent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.cpustats.sys.MemoryLoad} returns this
 */
proto.cpustats.sys.MemoryLoad.prototype.setUsedPercent = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpustats.sys.TempStats.prototype.toObject = function(opt_includeInstance) {
  return proto.cpustats.sys.TempStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpustats.sys.TempStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpustats.sys.TempStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    temperature: jspb.Message.getFieldWithDefault(msg, 1, 0),
    high: jspb.Message.getFieldWithDefault(msg, 2, 0),
    critical: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpustats.sys.TempStats}
 */
proto.cpustats.sys.TempStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpustats.sys.TempStats;
  return proto.cpustats.sys.TempStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpustats.sys.TempStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpustats.sys.TempStats}
 */
proto.cpustats.sys.TempStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTemperature(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHigh(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCritical(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpustats.sys.TempStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpustats.sys.TempStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpustats.sys.TempStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpustats.sys.TempStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTemperature();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getHigh();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCritical();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 temperature = 1;
 * @return {number}
 */
proto.cpustats.sys.TempStats.prototype.getTemperature = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cpustats.sys.TempStats} returns this
 */
proto.cpustats.sys.TempStats.prototype.setTemperature = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 high = 2;
 * @return {number}
 */
proto.cpustats.sys.TempStats.prototype.getHigh = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cpustats.sys.TempStats} returns this
 */
proto.cpustats.sys.TempStats.prototype.setHigh = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 critical = 3;
 * @return {number}
 */
proto.cpustats.sys.TempStats.prototype.getCritical = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.cpustats.sys.TempStats} returns this
 */
proto.cpustats.sys.TempStats.prototype.setCritical = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cpustats.sys.HardwareTemperatures.prototype.toObject = function(opt_includeInstance) {
  return proto.cpustats.sys.HardwareTemperatures.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cpustats.sys.HardwareTemperatures} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpustats.sys.HardwareTemperatures.toObject = function(includeInstance, msg) {
  var f, obj = {
    cpu: (f = msg.getCpu()) && proto.cpustats.sys.TempStats.toObject(includeInstance, f),
    gpu: (f = msg.getGpu()) && proto.cpustats.sys.TempStats.toObject(includeInstance, f),
    memory: (f = msg.getMemory()) && proto.cpustats.sys.TempStats.toObject(includeInstance, f),
    disk: (f = msg.getDisk()) && proto.cpustats.sys.TempStats.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cpustats.sys.HardwareTemperatures}
 */
proto.cpustats.sys.HardwareTemperatures.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cpustats.sys.HardwareTemperatures;
  return proto.cpustats.sys.HardwareTemperatures.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cpustats.sys.HardwareTemperatures} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cpustats.sys.HardwareTemperatures}
 */
proto.cpustats.sys.HardwareTemperatures.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cpustats.sys.TempStats;
      reader.readMessage(value,proto.cpustats.sys.TempStats.deserializeBinaryFromReader);
      msg.setCpu(value);
      break;
    case 2:
      var value = new proto.cpustats.sys.TempStats;
      reader.readMessage(value,proto.cpustats.sys.TempStats.deserializeBinaryFromReader);
      msg.setGpu(value);
      break;
    case 3:
      var value = new proto.cpustats.sys.TempStats;
      reader.readMessage(value,proto.cpustats.sys.TempStats.deserializeBinaryFromReader);
      msg.setMemory(value);
      break;
    case 4:
      var value = new proto.cpustats.sys.TempStats;
      reader.readMessage(value,proto.cpustats.sys.TempStats.deserializeBinaryFromReader);
      msg.setDisk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cpustats.sys.HardwareTemperatures.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cpustats.sys.HardwareTemperatures.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cpustats.sys.HardwareTemperatures} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cpustats.sys.HardwareTemperatures.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCpu();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cpustats.sys.TempStats.serializeBinaryToWriter
    );
  }
  f = message.getGpu();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cpustats.sys.TempStats.serializeBinaryToWriter
    );
  }
  f = message.getMemory();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.cpustats.sys.TempStats.serializeBinaryToWriter
    );
  }
  f = message.getDisk();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.cpustats.sys.TempStats.serializeBinaryToWriter
    );
  }
};


/**
 * optional TempStats cpu = 1;
 * @return {?proto.cpustats.sys.TempStats}
 */
proto.cpustats.sys.HardwareTemperatures.prototype.getCpu = function() {
  return /** @type{?proto.cpustats.sys.TempStats} */ (
    jspb.Message.getWrapperField(this, proto.cpustats.sys.TempStats, 1));
};


/**
 * @param {?proto.cpustats.sys.TempStats|undefined} value
 * @return {!proto.cpustats.sys.HardwareTemperatures} returns this
*/
proto.cpustats.sys.HardwareTemperatures.prototype.setCpu = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cpustats.sys.HardwareTemperatures} returns this
 */
proto.cpustats.sys.HardwareTemperatures.prototype.clearCpu = function() {
  return this.setCpu(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpustats.sys.HardwareTemperatures.prototype.hasCpu = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TempStats gpu = 2;
 * @return {?proto.cpustats.sys.TempStats}
 */
proto.cpustats.sys.HardwareTemperatures.prototype.getGpu = function() {
  return /** @type{?proto.cpustats.sys.TempStats} */ (
    jspb.Message.getWrapperField(this, proto.cpustats.sys.TempStats, 2));
};


/**
 * @param {?proto.cpustats.sys.TempStats|undefined} value
 * @return {!proto.cpustats.sys.HardwareTemperatures} returns this
*/
proto.cpustats.sys.HardwareTemperatures.prototype.setGpu = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cpustats.sys.HardwareTemperatures} returns this
 */
proto.cpustats.sys.HardwareTemperatures.prototype.clearGpu = function() {
  return this.setGpu(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpustats.sys.HardwareTemperatures.prototype.hasGpu = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TempStats memory = 3;
 * @return {?proto.cpustats.sys.TempStats}
 */
proto.cpustats.sys.HardwareTemperatures.prototype.getMemory = function() {
  return /** @type{?proto.cpustats.sys.TempStats} */ (
    jspb.Message.getWrapperField(this, proto.cpustats.sys.TempStats, 3));
};


/**
 * @param {?proto.cpustats.sys.TempStats|undefined} value
 * @return {!proto.cpustats.sys.HardwareTemperatures} returns this
*/
proto.cpustats.sys.HardwareTemperatures.prototype.setMemory = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cpustats.sys.HardwareTemperatures} returns this
 */
proto.cpustats.sys.HardwareTemperatures.prototype.clearMemory = function() {
  return this.setMemory(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpustats.sys.HardwareTemperatures.prototype.hasMemory = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TempStats disk = 4;
 * @return {?proto.cpustats.sys.TempStats}
 */
proto.cpustats.sys.HardwareTemperatures.prototype.getDisk = function() {
  return /** @type{?proto.cpustats.sys.TempStats} */ (
    jspb.Message.getWrapperField(this, proto.cpustats.sys.TempStats, 4));
};


/**
 * @param {?proto.cpustats.sys.TempStats|undefined} value
 * @return {!proto.cpustats.sys.HardwareTemperatures} returns this
*/
proto.cpustats.sys.HardwareTemperatures.prototype.setDisk = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cpustats.sys.HardwareTemperatures} returns this
 */
proto.cpustats.sys.HardwareTemperatures.prototype.clearDisk = function() {
  return this.setDisk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cpustats.sys.HardwareTemperatures.prototype.hasDisk = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.cpustats.sys);
